# Estrutura do projeto

Projeto-TP2
│
├── README.md
├── LEIAME.txt
├── LICENSE
├── Doxyfile
│
├── app/
│   │
│   ├── main.py             # main do servidor
│   │
│   ├── templates/          # páginas HTML fornecidas pelo servidor
│   │
│   ├── static/             # elementos estáticos requisitados pelo cliente (códigos, imagens, etc.)
│   │
│   ├── modules/            # módulos do servidor
│   │
│   └── test/               # módulos de teste do servidor
│
└── artefatos/
    │
    ├── Especificação.txt
    │
    ├── diagramas/
    │
    ├── revisões/           # laudos de revisão
    │
    └── docs/               # documentação Doxygen


# Formatação e documentação de código

Diretórios:   kebab-case
Arquivos:     snake_case

Formatação e estilo (PEP8):
Módulos:      snake_case
Classes:      PascalCase
Funções:      snake_case
Variáveis:    snake_case
Constantes:   SCREAMING_SNAKE_CASE


> Cabeçalho de módulo

"""! @package nome_modulo
  Descrição breve.

  Descrição detalhada
"""


> Cabeçalho de classe

class ProductList:
    """! Descrição breve.

    Descrição detalhada.
    """

> Cabeçalhos de função
def nome_funcao(arg0, arg1):
    """! Descrição breve

    Descrição detalhada.

    @param  arg0  Descrição parâmetro 0.
    @param  arg1  Descrição parâmetro 1.

    @return  var_retorno  Variável de retorno.

    Assertivas de entrada
      - condicao0
    Assertivas de saída
      - condicao1
      - condicao2
    """

Exemplos:
def ListProducts(nome, filtros):
    """! Envia para o cliente uma lista de os produtos cadastrados.
    
    @param  nome     Nome pesquisado.
    @param  filtros  Filtros aplicados.
    """

def __init__(self):
    """! Construtor da classe"""


> Assertivas de entrada e saída

(condição)

Exs.: !GetAccount()
      len(productList) >= 0
      key é uma chave válida.   # pode ser que precise ser mais descritiva



# Laudos de revisão



# Relatórios
DATA        | HORAS |  TIPO TAREFA   |  DESCRIÇÃO DA TAREFA REALIZADA
AAAA.MM.DD  |  HHh  |  tipo          |  descrição


Exemplo:

DATA        | HORAS |  TIPO TAREFA             |  DESCRIÇÃO DA TAREFA REALIZADA
2025.06.17  |  02h  |  revisar especificações  |  função de pesquisar produtos não precisa de
            |       |                          |  adivinhar nomes escrito errado
            |       |                          |  
            |  01h  |  fazer diagramas         |  modelar o subsistema de pesquisa de produto
            |       |                          |  
2025.06.18  |  10h  |  revisar projetos        |  paradas


Tipos de tarefa:
  Geral
  - estudar aulas e laboratórios relacionados
  - gerenciar a construção do software

  Modelagem e especificação
  - projetar
  - revisar projetos
  - fazer diagramas
  - especificar os módulos
  - especificar as funções
  - revisar especificações

  Implementação
  - codificar módulo
  - revisar código do módulo
  - rodar o verificador estático e retirar warnings

  Testes
  - redigir casos de teste
  - revisar casos de teste
  - realizar os testes

  Cobertura e documentação
  - instrumentar verificando a cobertura
  - documentar com Doxygen



# Especificação e descrição do projeto

"Estórias" de usuário (EUs):
- perspectiva do usuário
- numeradas no formato EU001

Diagramas de caso de uso
- detalham ações do usuário e respostas do sistema a ele
- <<include>>: casos de uso utilizados
- <<extends>>: casos de uso englobados
- interfaces: interfaces utilizadas

Detalhamento de cada caso de uso
- nome, tipo (primário, secundário, opcional), descrição
- atores
- referências (EUs)
- pré-condições: assertivas prévias ao caso de uso
- fluxo de eventos:
  - principal (típico),
  - alternativos (esperado mas variante do típico),
  - atípicos (erros, cancelamento pelo usuário, etc.)
- pós-condições: assertivas posteriores ao caso de uso
- pontos de extensão: casos de uso que que são englobados pelo caso de uso em questão
- casos de uso incluídos: casos de uso utilizados <<include>>
- outros requisitos (interfaces)
- ações do ator VS resposta do sistema (colunas separadas)

Diagramas de fluxo de dados (DFD)
- entidades externas (retângulo): podem ser duplicados para evitar cruzamento de linhas
- fluxo de dados (setas unilaterais com nome do dado): contém só um tipo de dado
- armazenamento de dados (retângulo com lado direito aberto)
- processos (elipses ou retangulos arredondados):
  - precisam de um fluxo de dados chegando e outro saindo
  - nomeados como "<verbo> <objeto>", "Valida ingresso"
